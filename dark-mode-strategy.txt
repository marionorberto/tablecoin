Implementar um modo claro (light mode) e um modo escuro (dark mode) em um site é uma prática cada vez mais comum para melhorar a acessibilidade e a experiência do usuário. Aqui estão os passos para implementar essa funcionalidade:

### 1. Estrutura Básica HTML

Primeiro, crie uma estrutura HTML básica para o seu site.

```html
<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dark/Light Mode</title>
    <link rel="stylesheet" href="styles.css">
</head>
<body>
    <header>
        <h1>Dark/Light Mode Example</h1>
        <button id="toggleButton">Toggle Mode</button>
    </header>
    <main>
        <p>Este é um exemplo de implementação de dark mode e light mode.</p>
    </main>
    <script src="script.js"></script>
</body>
</html>
```

### 2. CSS para Dark Mode e Light Mode

Defina as variáveis de cor no CSS para cada modo.

```css
/* styles.css */

/* Variáveis de cor para Light Mode */
:root {
    --background-color: #ffffff;
    --text-color: #000000;
}

/* Variáveis de cor para Dark Mode */
[data-theme="dark"] {
    --background-color: #333333;
    --text-color: #ffffff;
}

/* Estilos Globais */
body {
    background-color: var(--background-color);
    color: var(--text-color);
    transition: background-color 0.3s, color 0.3s;
}

header {
    display: flex;
    justify-content: space-between;
    padding: 1rem;
    background-color: var(--background-color);
}

button {
    padding: 0.5rem 1rem;
    border: none;
    cursor: pointer;
}
```

### 3. Lógica JavaScript para Alternar os Modos

Implemente a lógica em JavaScript para alternar entre os modos e armazenar a preferência do usuário no `localStorage`.

```javascript
// script.js

document.addEventListener('DOMContentLoaded', () => {
    const toggleButton = document.getElementById('toggleButton');
    const currentTheme = localStorage.getItem('theme');

    if (currentTheme) {
        document.documentElement.setAttribute('data-theme', currentTheme);
        if (currentTheme === 'dark') {
            toggleButton.textContent = 'Light Mode';
        }
    }

    toggleButton.addEventListener('click', () => {
        let theme = document.documentElement.getAttribute('data-theme');
        if (theme === 'dark') {
            document.documentElement.setAttribute('data-theme', 'light');
            localStorage.setItem('theme', 'light');
            toggleButton.textContent = 'Dark Mode';
        } else {
            document.documentElement.setAttribute('data-theme', 'dark');
            localStorage.setItem('theme', 'dark');
            toggleButton.textContent = 'Light Mode';
        }
    });
});
```

### 4. Implementação e Testes

Salve os arquivos `index.html`, `styles.css` e `script.js` e abra o `index.html` em um navegador para testar. Clique no botão para alternar entre os modos e veja a alteração visual instantaneamente. A preferência do usuário será armazenada no `localStorage`, garantindo que a escolha do tema seja persistente entre as sessões.

### Explicação

- **HTML:** Estrutura básica do site com um botão para alternar entre os modos.
- **CSS:** Define variáveis de cor para ambos os modos e aplica essas variáveis aos estilos globais.
- **JavaScript:** Adiciona a lógica para alternar entre os modos, altera as variáveis de cor no `:root` e armazena a preferência do usuário no `localStorage`.

### Considerações Adicionais

1. **Acessibilidade:** Certifique-se de que as cores escolhidas proporcionem contraste suficiente para a legibilidade.
2. **Transições Suaves:** Utilize transições CSS para uma mudança suave entre os modos.
3. **Suporte a Mais Elementos:** Expanda as variáveis de cor para cobrir todos os elementos do site.

Essa abordagem garante uma implementação eficiente e user-friendly de modos claro e escuro em seu site.
